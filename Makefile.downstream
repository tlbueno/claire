#
# Copyright Broker QE authors.
# License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
#
ROOT_DIR                                          = $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
# --update-snapshots in mvn below is used to ensure always the latest dependencies version are used
# as an example, artemiscloud-crd generated by us for the downstream build may needs to be rebuild
# multiple times without version number change and our CI job may need to be executed in multiple
# times in a short period causing maven to skip the download of the new dependencies.
MVN_DEFAULT_CMD                                   = mvn --update-snapshots --no-transfer-progress -s ${ROOT_DIR}/settings.xml
MVN_TEST_CMD                                      = ${MVN_DEFAULT_CMD} failsafe:integration-test
WGET_CMD                                          = wget -nv -c

ARTEMIS_VERSION                                  ?= 7.11.6
RELEASE_TYPE                                     ?= released

OPERATOR_ROOT_DIR                                 = ${ROOT_DIR}/operator-suite

STANDALONE_ROOT_DIR                               = ${ROOT_DIR}/standalone-suite
STANDALONE_ARTEMIS_DIR                            = ${STANDALONE_ROOT_DIR}/artemis
STANDALONE_ARTEMIS_INSTALL_DIR                    = ${STANDALONE_ARTEMIS_DIR}/artemis_install
STANDALONE_ARTEMIS_DEFAULT_CFG_DIR                = ${STANDALONE_ARTEMIS_DIR}/artemis_default_cfg
STANDALONE_INSTANCE_NAME                          = artemis-instance
STANDALONE_USER                                   = admin
STANDALONE_PASSWORD                               = admin
STANDALONE_CONTAINER_ARTEMIS_INSTANCE_DIR         = /var/lib/artemis-instance
STANDALONE_CONTAINER_ARTEMIS_INSTANCE_ETC_DIR     = ${STANDALONE_CONTAINER_ARTEMIS_INSTANCE_DIR}/etc

ifdef TESTS
    $(eval MVN_TESTS_PARAM := -Dit.test="${TESTS}")
endif
ifdef TEST_GROUPS
    $(eval MVN_GROUPS_PARAM := -Dgroups="${TEST_GROUPS}")
endif

clean: clean_maven standalone_clean operator_clean
	- rm -f ${ROOT_DIR}/{settings.xml,version_map.yaml,common.yaml}

clean_maven:
	mvn --no-transfer-progress versions:revert clean

build: standalone_prepare operator_prepare build_maven

build_maven:
	${MVN_DEFAULT_CMD} versions:update-property -Dproperty=artemiscloud-crd.version -DnewVersion=${OPERATOR_CR_VERSION}
	${MVN_DEFAULT_CMD} -DskipTests install

checkstyle: get_settings_xml_file
	${MVN_DEFAULT_CMD} checkstyle:check

get_settings_xml_file:
	${WGET_CMD} "https://gitlab.cee.redhat.com/amq-broker/amq-broker-ci/-/raw/main/resources/claire/claire-settings.xml" -O "${ROOT_DIR}/settings.xml"

get_metadata_files:
	${WGET_CMD} "https://gitlab.cee.redhat.com/amq-broker/amq-broker-metadata/-/raw/main/broker_properties/amq_broker/version_map.yaml" -O "${ROOT_DIR}/version_map.yaml"
	${WGET_CMD} "https://gitlab.cee.redhat.com/amq-broker/amq-broker-metadata/-/raw/main/broker_properties/amq_broker/common.yaml" -O "${ROOT_DIR}/common.yaml"

### Standalone targets
standalone_clean:
	- rm -rf ${STANDALONE_ARTEMIS_DIR}

standalone_prepare_urls:
	$(eval CR_VERSION := $(shell yq  '."${ARTEMIS_VERSION}".standalone.${RELEASE_TYPE}' "${ROOT_DIR}/version_map.yaml"))
ifndef ARTEMIS_INSTALL_ZIP
	$(eval BROKER_CANDIDATE_URL := $(shell yq  '.candidatesBaseUrl' "${ROOT_DIR}/common.yaml"))
	$(eval ARTEMIS_INSTALL_ZIP :=  ${BROKER_CANDIDATE_URL}/amq-broker-${CR_VERSION}/amq-broker-${CR_VERSION}-bin.zip)
endif

standalone_prepare: get_settings_xml_file get_metadata_files standalone_prepare_urls standalone_prepare_dirs standalone_download_zip standalone_generate_artemis_default_cfg

standalone_build_java:
	${MVN_DEFAULT_CMD} --projects :standalone-suite install -DskipTests

standalone_build: standalone_prepare standalone_build_java

standalone_test_smoke:
	${MVN_TEST_CMD} --projects :standalone-suite -Dgroups="smoke"

standalone_test:
	${MVN_TEST_CMD} --projects :standalone-suite ${MVN_TESTS_PARAM} ${MVN_GROUPS_PARAM}

standalone_prepare_dirs:
	mkdir -p ${STANDALONE_ARTEMIS_INSTALL_DIR}

standalone_download_zip:
	${WGET_CMD} ${ARTEMIS_INSTALL_ZIP} -P /tmp/
	$(eval ARTEMIS_FILE := /tmp/$(shell basename ${ARTEMIS_INSTALL_ZIP}))
	cp -f ${ARTEMIS_FILE} ${STANDALONE_ARTEMIS_DIR}/artemis.zip
	rm -rf ${STANDALONE_ARTEMIS_INSTALL_DIR}/*
	unzip -q -o ${STANDALONE_ARTEMIS_DIR}/artemis.zip -d ${STANDALONE_ARTEMIS_INSTALL_DIR}
	mv ${STANDALONE_ARTEMIS_INSTALL_DIR}/*/* ${STANDALONE_ARTEMIS_INSTALL_DIR}
	rm -rf ${STANDALONE_ARTEMIS_INSTALL_DIR}/examples
	find ${STANDALONE_ARTEMIS_INSTALL_DIR} -maxdepth 1 -type d -name apache-artemis-* -exec rmdir \{\} \;

standalone_generate_artemis_default_cfg:
	# create default instance
	${STANDALONE_ARTEMIS_INSTALL_DIR}/bin/artemis create --force --name ${STANDALONE_INSTANCE_NAME} \
		--user ${STANDALONE_USER} --password ${STANDALONE_PASSWORD} \
		--require-login ${STANDALONE_ARTEMIS_DEFAULT_CFG_DIR}
	# update artemis command with correct container instance path
	sed -i.bak -re "s#^(ARTEMIS_INSTANCE_ETC=)(.*)#\1'${STANDALONE_CONTAINER_ARTEMIS_INSTANCE_ETC_DIR}'#" \
		${STANDALONE_ARTEMIS_DEFAULT_CFG_DIR}/bin/artemis

### Operator targets
operator_clean:
	- rm -rf ${OPERATOR_ROOT_DIR}/artemis

operator_prepare_dirs:
	mkdir -p ${OPERATOR_ROOT_DIR}/artemis

operator_prepare_urls:
	$(eval OPERATOR_CR_VERSION := $(shell \
		yq '."dev.latest"' version_map.yaml | grep ${ARTEMIS_VERSION} > /dev/null && echo main \
		|| yq .\"${ARTEMIS_VERSION}\".operator.${RELEASE_TYPE} version_map.yaml | grep ${ARTEMIS_VERSION} \
		|| yq .\"${ARTEMIS_VERSION}\".upstream_operator version_map.yaml; \
	))

operator_prepare: get_settings_xml_file get_metadata_files operator_prepare_urls operator_prepare_dirs

operator_build_java:
	${MVN_DEFAULT_CMD} versions:update-property -Dproperty=artemiscloud-crd.version -DnewVersion=${OPERATOR_CR_VERSION}
	${MVN_DEFAULT_CMD} --projects :operator-suite install -DskipTests

operator_build: operator_prepare operator_build_java

operator_test_smoke:
	${MVN_TEST_CMD} --projects :operator-suite -Dgroups="smoke"

operator_test:
	${MVN_TEST_CMD} --projects :operator-suite ${MVN_TESTS_PARAM} ${MVN_GROUPS_PARAM}

.PHONY: clean
